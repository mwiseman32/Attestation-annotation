diff --git a/security/integrity/ima/Makefile b/security/integrity/ima/Makefile
index d921dc4..8508b66 100644
--- a/security/integrity/ima/Makefile
+++ b/security/integrity/ima/Makefile
@@ -7,7 +7,7 @@
 obj-$(CONFIG_IMA) += ima.o
 
 ima-y := ima_fs.o ima_queue.o ima_init.o ima_main.o ima_crypto.o ima_api.o \
-	 ima_policy.o ima_template.o ima_template_lib.o
+	 ima_policy.o ima_template.o ima_template_lib.o ima_fs_template.o
 ima-$(CONFIG_IMA_APPRAISE) += ima_appraise.o
 ima-$(CONFIG_HAVE_IMA_KEXEC) += ima_kexec.o
 obj-$(CONFIG_IMA_BLACKLIST_KEYRING) += ima_mok.o
diff --git a/security/integrity/ima/ima.h b/security/integrity/ima/ima.h
index 3bc6206..f9d5da0 100644
--- a/security/integrity/ima/ima.h
+++ b/security/integrity/ima/ima.h
@@ -132,6 +132,7 @@ extern bool ima_canonical_fmt;
 /* Internal IMA function definitions */
 int ima_init(void);
 int ima_fs_init(void);
+int ima_fs_record_init(void);
 int ima_add_template_entry(struct ima_template_entry *entry, int violation,
 			   const char *op, struct inode *inode,
 			   const unsigned char *filename);
@@ -152,9 +153,17 @@ struct ima_template_desc *ima_template_desc_current(void);
 int ima_restore_measurement_entry(struct ima_template_entry *entry);
 int ima_restore_measurement_list(loff_t bufsize, void *buf);
 int ima_measurements_show(struct seq_file *m, void *v);
+void *ima_measurements_start(struct seq_file *m, loff_t *pos);
+void *ima_measurements_next(struct seq_file *m, void *v, loff_t *pos);
+void ima_measurements_stop(struct seq_file *m, void *v);
 unsigned long ima_get_binary_runtime_size(void);
 int ima_init_template(void);
 void ima_init_template_list(void);
+extern struct dentry *ima_dir;
+extern struct dentry *binary_runtime_measurements;
+extern struct dentry *ascii_runtime_measurements;
+extern const struct file_operations ima_measurements_ops;
+extern const struct file_operations ima_ascii_measurements_ops;
 int __init ima_init_digests(void);
 
 /*
diff --git a/security/integrity/ima/ima_fs.c b/security/integrity/ima/ima_fs.c
index 0af7928..cff74ef 100644
--- a/security/integrity/ima/ima_fs.c
+++ b/security/integrity/ima/ima_fs.c
@@ -31,14 +31,5 @@
 
 static DEFINE_MUTEX(ima_write_mutex);
 
-bool ima_canonical_fmt;
-static int __init default_canonical_fmt_setup(char *str)
-{
-#ifdef __BIG_ENDIAN
-	ima_canonical_fmt = true;
-#endif
-	return 1;
-}
-__setup("ima_canonical_fmt", default_canonical_fmt_setup);
 
 static int valid_policy = 1;
@@ -78,40 +69,8 @@ static const struct file_operations ima_measurements_count_ops = {
 	.llseek = generic_file_llseek,
 };
 
-/* returns pointer to hlist_node */
-static void *ima_measurements_start(struct seq_file *m, loff_t *pos)
-{
-	loff_t l = *pos;
-	struct ima_queue_entry *qe;
-
-	/* we need a lock since pos could point beyond last element */
-	rcu_read_lock();
-	list_for_each_entry_rcu(qe, &ima_measurements, later) {
-		if (!l--) {
-			rcu_read_unlock();
-			return qe;
-		}
-	}
-	rcu_read_unlock();
-	return NULL;
-}
-
-static void *ima_measurements_next(struct seq_file *m, void *v, loff_t *pos)
-{
-	struct ima_queue_entry *qe = v;
-
-	/* lock protects when reading beyond last element
-	 * against concurrent list-extension
-	 */
-	rcu_read_lock();
-	qe = list_entry_rcu(qe->later.next, struct ima_queue_entry, later);
-	rcu_read_unlock();
-	(*pos)++;
-
-	return (&qe->later == &ima_measurements) ? NULL : qe;
-}
 
-static void ima_measurements_stop(struct seq_file *m, void *v)
+void ima_measurements_stop(struct seq_file *m, void *v)
 {
 }

@@ -121,75 +80,6 @@ void ima_putc(struct seq_file *m, void *data, int datalen)
 		seq_putc(m, *(char *)data++);
 }
 
-/* print format:
- *       32bit-le=pcr#
- *       char[20]=template digest
- *       32bit-le=template name size
- *       char[n]=template name
- *       [eventdata length]
- *       eventdata[n]=template specific data
- */
-int ima_measurements_show(struct seq_file *m, void *v)
-{
-	/* the list never shrinks, so we don't need a lock here */
-	struct ima_queue_entry *qe = v;
-	struct ima_template_entry *e;
-	char *template_name;
-	u32 pcr, namelen, template_data_len; /* temporary fields */
-	bool is_ima_template = false;
-	int i;
-
-	/* get entry */
-	e = qe->entry;
-	if (e == NULL)
-		return -1;
-
-	template_name = (e->template_desc->name[0] != '\0') ?
-	    e->template_desc->name : e->template_desc->fmt;
-
-	/*
-	 * 1st: PCRIndex
-	 * PCR used defaults to the same (config option) in
-	 * little-endian format, unless set in policy
-	 */
-	pcr = !ima_canonical_fmt ? e->pcr : cpu_to_le32(e->pcr);
-	ima_putc(m, &pcr, sizeof(e->pcr));
-
-	/* 2nd: template digest */
-	ima_putc(m, e->digest, TPM_DIGEST_SIZE);
-
-	/* 3rd: template name size */
-	namelen = !ima_canonical_fmt ? strlen(template_name) :
-		cpu_to_le32(strlen(template_name));
-	ima_putc(m, &namelen, sizeof(namelen));
-
-	/* 4th:  template name */
-	ima_putc(m, template_name, strlen(template_name));
-
-	/* 5th:  template length (except for 'ima' template) */
-	if (strcmp(template_name, IMA_TEMPLATE_IMA_NAME) == 0)
-		is_ima_template = true;
-
-	if (!is_ima_template) {
-		template_data_len = !ima_canonical_fmt ? e->template_data_len :
-			cpu_to_le32(e->template_data_len);
-		ima_putc(m, &template_data_len, sizeof(e->template_data_len));
-	}
-
-	/* 6th:  template specific data */
-	for (i = 0; i < e->template_desc->num_fields; i++) {
-		enum ima_show_type show = IMA_SHOW_BINARY;
-		const struct ima_template_field *field =
-			e->template_desc->fields[i];
-
-		if (is_ima_template && strcmp(field->field_id, "d") == 0)
-			show = IMA_SHOW_BINARY_NO_FIELD_LEN;
-		if (is_ima_template && strcmp(field->field_id, "n") == 0)
-			show = IMA_SHOW_BINARY_OLD_STRING_FMT;
-		field->field_show(m, show, &e->template_data[i]);
-	}
-	return 0;
-}
 
 static const struct seq_operations ima_measurments_seqops = {
 	.start = ima_measurements_start,
@@ -203,78 +93,13 @@ static int ima_measurements_open(struct inode *inode, struct file *file)
 	return seq_open(file, &ima_measurments_seqops);
 }
 
-static const struct file_operations ima_measurements_ops = {
+const struct file_operations ima_measurements_ops = {
 	.open = ima_measurements_open,
 	.read = seq_read,
 	.llseek = seq_lseek,
 	.release = seq_release,
 };
 
-void ima_print_digest(struct seq_file *m, u8 *digest, u32 size)
-{
-	u32 i;
-
-	for (i = 0; i < size; i++)
-		seq_printf(m, "%02x", *(digest + i));
-}
-
-/* print in ascii */
-static int ima_ascii_measurements_show(struct seq_file *m, void *v)
-{
-	/* the list never shrinks, so we don't need a lock here */
-	struct ima_queue_entry *qe = v;
-	struct ima_template_entry *e;
-	char *template_name;
-	int i;
-
-	/* get entry */
-	e = qe->entry;
-	if (e == NULL)
-		return -1;
-
-	template_name = (e->template_desc->name[0] != '\0') ?
-	    e->template_desc->name : e->template_desc->fmt;
-
-	/* 1st: PCR used (config option) */
-	seq_printf(m, "%2d ", e->pcr);
-
-	/* 2nd: SHA1 template hash */
-	ima_print_digest(m, e->digest, TPM_DIGEST_SIZE);
-
-	/* 3th:  template name */
-	seq_printf(m, " %s", template_name);
-
-	/* 4th:  template specific data */
-	for (i = 0; i < e->template_desc->num_fields; i++) {
-		seq_puts(m, " ");
-		if (e->template_data[i].len == 0)
-			continue;
-
-		e->template_desc->fields[i]->field_show(m, IMA_SHOW_ASCII,
-							&e->template_data[i]);
-	}
-	seq_puts(m, "\n");
-	return 0;
-}
-
-static const struct seq_operations ima_ascii_measurements_seqops = {
-	.start = ima_measurements_start,
-	.next = ima_measurements_next,
-	.stop = ima_measurements_stop,
-	.show = ima_ascii_measurements_show
-};
-
-static int ima_ascii_measurements_open(struct inode *inode, struct file *file)
-{
-	return seq_open(file, &ima_ascii_measurements_seqops);
-}
-
-static const struct file_operations ima_ascii_measurements_ops = {
-	.open = ima_ascii_measurements_open,
-	.read = seq_read,
-	.llseek = seq_lseek,
-	.release = seq_release,
-};
 
 static ssize_t ima_read_policy(char *path)
 {
@@ -359,13 +184,14 @@ static ssize_t ima_write_policy(struct file *file, const char __user *buf,
 	return result;
 }
 
-static struct dentry *ima_dir;
-static struct dentry *ima_symlink;
-static struct dentry *binary_runtime_measurements;
-static struct dentry *ascii_runtime_measurements;
+struct dentry *ima_dir;
+struct dentry *binary_runtime_measurements;
+struct dentry *tlv_runtime_measurements;
+struct dentry *ascii_runtime_measurements;
 static struct dentry *runtime_measurements_count;
 static struct dentry *violations;
 static struct dentry *ima_policy;
+static struct dentry *ima_symlink;
 
 enum ima_fs_flags {
 	IMA_FS_BUSY,
@@ -464,19 +290,6 @@ int __init ima_fs_init(void)
 	if (IS_ERR(ima_symlink))
 		goto out;
 
-	binary_runtime_measurements =
-	    securityfs_create_file("binary_runtime_measurements",
-				   S_IRUSR | S_IRGRP, ima_dir, NULL,
-				   &ima_measurements_ops);
-	if (IS_ERR(binary_runtime_measurements))
-		goto out;
-
-	ascii_runtime_measurements =
-	    securityfs_create_file("ascii_runtime_measurements",
-				   S_IRUSR | S_IRGRP, ima_dir, NULL,
-				   &ima_ascii_measurements_ops);
-	if (IS_ERR(ascii_runtime_measurements))
-		goto out;
 
 	runtime_measurements_count =
 	    securityfs_create_file("runtime_measurements_count",
@@ -496,6 +309,8 @@ int __init ima_fs_init(void)
 					    &ima_measure_policy_ops);
 	if (IS_ERR(ima_policy))
 		goto out;
+	if (ima_fs_record_init())
+		goto out;
 
 	return 0;
 out:
diff --git a/security/integrity/ima/ima_fs_template.c b/security/integrity/ima/ima_fs_template.c
new file mode 100644
index 0000000..b073880
--- /dev/null
+++ b/security/integrity/ima/ima_fs_template.c
@@ -0,0 +1,230 @@
+/*
+ * Copyright (C) 2005,2006,2007,2008 IBM Corporation
+ *
+ * Authors:
+ * Kylene Hall <kjhall@us.ibm.com>
+ * Reiner Sailer <sailer@us.ibm.com>
+ * Mimi Zohar <zohar@us.ibm.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation, version 2 of the
+ * License.
+ *
+ * File: ima_fs.c
+ *	implemenents security file system for reporting
+ *	current measurement list and IMA statistics
+ */
+
+#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
+
+#include <linux/fcntl.h>
+#include <linux/slab.h>
+#include <linux/module.h>
+#include <linux/seq_file.h>
+#include <linux/rculist.h>
+#include <linux/rcupdate.h>
+#include <linux/parser.h>
+#include <linux/vmalloc.h>
+
+#include "ima.h"
+
+bool ima_canonical_fmt;
+static int __init default_canonical_fmt_setup(char *str)
+{
+#ifdef __BIG_ENDIAN
+	ima_canonical_fmt = true;
+#endif
+	return 1;
+}
+__setup("ima_canonical_fmt", default_canonical_fmt_setup);
+
+/* returns pointer to hlist_node */
+void *ima_measurements_start(struct seq_file *m, loff_t *pos)
+{
+	loff_t l = *pos;
+	struct ima_queue_entry *qe;
+
+	/* we need a lock since pos could point beyond last element */
+	rcu_read_lock();
+	list_for_each_entry_rcu(qe, &ima_measurements, later) {
+		if (!l--) {
+			rcu_read_unlock();
+			return qe;
+		}
+	}
+	rcu_read_unlock();
+	return NULL;
+}
+
+void *ima_measurements_next(struct seq_file *m, void *v, loff_t *pos)
+{
+	struct ima_queue_entry *qe = v;
+
+	/* lock protects when reading beyond last element
+	 * against concurrent list-extension
+	 */
+	rcu_read_lock();
+	qe = list_entry_rcu(qe->later.next, struct ima_queue_entry, later);
+	rcu_read_unlock();
+	(*pos)++;
+
+	return (&qe->later == &ima_measurements) ? NULL : qe;
+}
+
+
+/* print format:
+ *       32bit-le=pcr#
+ *       char[20]=template digest
+ *       32bit-le=template name size
+ *       char[n]=template name
+ *       [eventdata length]
+ *       eventdata[n]=template specific data
+ */
+int ima_measurements_show(struct seq_file *m, void *v)
+{
+	/* the list never shrinks, so we don't need a lock here */
+	struct ima_queue_entry *qe = v;
+	struct ima_template_entry *e;
+	char *template_name;
+	u32 pcr, namelen, template_data_len; /* temporary fields */
+	bool is_ima_template = false;
+	int i;
+
+	/* get entry */
+	e = qe->entry;
+	if (e == NULL)
+		return -1;
+
+	template_name = (e->template_desc->name[0] != '\0') ?
+	    e->template_desc->name : e->template_desc->fmt;
+
+	/*
+	 * 1st: PCRIndex
+	 * PCR used defaults to the same (config option) in
+	 * little-endian format, unless set in policy
+	 */
+	pcr = !ima_canonical_fmt ? e->pcr : cpu_to_le32(e->pcr);
+	ima_putc(m, &pcr, sizeof(e->pcr));
+
+	/* 2nd: template digest */
+	ima_putc(m, e->digest, TPM_DIGEST_SIZE);
+
+	/* 3rd: template name size */
+	namelen = !ima_canonical_fmt ? strlen(template_name) :
+		cpu_to_le32(strlen(template_name));
+	ima_putc(m, &namelen, sizeof(namelen));
+
+	/* 4th:  template name */
+	ima_putc(m, template_name, strlen(template_name));
+
+	/* 5th:  template length (except for 'ima' template) */
+	if (strcmp(template_name, IMA_TEMPLATE_IMA_NAME) == 0)
+		is_ima_template = true;
+
+	if (!is_ima_template) {
+		template_data_len = !ima_canonical_fmt ? e->template_data_len :
+			cpu_to_le32(e->template_data_len);
+		ima_putc(m, &template_data_len, sizeof(e->template_data_len));
+	}
+
+	/* 6th:  template specific data */
+	for (i = 0; i < e->template_desc->num_fields; i++) {
+		enum ima_show_type show = IMA_SHOW_BINARY;
+		const struct ima_template_field *field = e->template_desc->fields[i];
+
+		if (is_ima_template && strcmp(field->field_id, "d") == 0)
+			show = IMA_SHOW_BINARY_NO_FIELD_LEN;
+		if (is_ima_template && strcmp(field->field_id, "n") == 0)
+			show = IMA_SHOW_BINARY_OLD_STRING_FMT;
+		field->field_show(m, show, &e->template_data[i]);
+	}
+	return 0;
+}
+
+
+void ima_print_digest(struct seq_file *m, u8 *digest, u32 size)
+{
+	u32 i;
+
+	for (i = 0; i < size; i++)
+		seq_printf(m, "%02x", *(digest + i));
+}
+
+/* print in ascii */
+int ima_ascii_measurements_show(struct seq_file *m, void *v)
+{
+	/* the list never shrinks, so we don't need a lock here */
+	struct ima_queue_entry *qe = v;
+	struct ima_template_entry *e;
+	char *template_name;
+	int i;
+
+	/* get entry */
+	e = qe->entry;
+	if (e == NULL)
+		return -1;
+
+	template_name = (e->template_desc->name[0] != '\0') ?
+	    e->template_desc->name : e->template_desc->fmt;
+
+	/* 1st: PCR used (config option) */
+	seq_printf(m, "%2d ", e->pcr);
+
+	/* 2nd: SHA1 template hash */
+	ima_print_digest(m, e->digest, TPM_DIGEST_SIZE);
+
+	/* 3th:  template name */
+	seq_printf(m, " %s", template_name);
+
+	/* 4th:  template specific data */
+	for (i = 0; i < e->template_desc->num_fields; i++) {
+		seq_puts(m, " ");
+		if (e->template_data[i].len == 0)
+			continue;
+
+		e->template_desc->fields[i]->field_show(m, IMA_SHOW_ASCII,
+							&e->template_data[i]);
+	}
+	seq_puts(m, "\n");
+	return 0;
+}
+
+const struct seq_operations ima_ascii_measurements_seqops = {
+	.start = ima_measurements_start,
+	.next = ima_measurements_next,
+	.stop = ima_measurements_stop,
+	.show = ima_ascii_measurements_show
+};
+
+static int ima_ascii_measurements_open(struct inode *inode, struct file *file)
+{
+	return seq_open(file, &ima_ascii_measurements_seqops);
+}
+
+const struct file_operations ima_ascii_measurements_ops = {
+	.open = ima_ascii_measurements_open,
+	.read = seq_read,
+	.llseek = seq_lseek,
+	.release = seq_release,
+};
+
+int __init ima_fs_record_init(void)
+{
+	binary_runtime_measurements =
+	    securityfs_create_file("binary_runtime_measurements",
+				   S_IRUSR | S_IRGRP, ima_dir, NULL,
+				   &ima_measurements_ops);
+	if (IS_ERR(binary_runtime_measurements))
+		return -1;
+
+	ascii_runtime_measurements =
+	    securityfs_create_file("ascii_runtime_measurements",
+				   S_IRUSR | S_IRGRP, ima_dir, NULL,
+				   &ima_ascii_measurements_ops);
+	if (IS_ERR(ascii_runtime_measurements))
+		return -1;
+
+	return 0;
+}
+
